//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Renovación_LIS_Client.ServiceMultiplayerGameReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMultiplayerGameReference.IMultiplayerGame", CallbackContract=typeof(Renovación_LIS_Client.ServiceMultiplayerGameReference.IMultiplayerGameCallback))]
    public interface IMultiplayerGame {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/BanPlayer")]
        void BanPlayer(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/BanPlayer")]
        System.Threading.Tasks.Task BanPlayerAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/Connect")]
        void Connect(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/Connect")]
        System.Threading.Tasks.Task ConnectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/Disconnect")]
        void Disconnect(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/SetAdmin")]
        void SetAdmin(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/SetAdmin")]
        System.Threading.Tasks.Task SetAdminAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/UnbanPlayer")]
        void UnbanPlayer(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/UnbanPlayer")]
        System.Threading.Tasks.Task UnbanPlayerAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/GetBannedProfiles", ReplyAction="http://tempuri.org/IMultiplayerGame/GetBannedProfilesResponse")]
        string[] GetBannedProfiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/GetBannedProfiles", ReplyAction="http://tempuri.org/IMultiplayerGame/GetBannedProfilesResponse")]
        System.Threading.Tasks.Task<string[]> GetBannedProfilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/GetConnectedProfiles", ReplyAction="http://tempuri.org/IMultiplayerGame/GetConnectedProfilesResponse")]
        string[] GetConnectedProfiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/GetConnectedProfiles", ReplyAction="http://tempuri.org/IMultiplayerGame/GetConnectedProfilesResponse")]
        System.Threading.Tasks.Task<string[]> GetConnectedProfilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/IsAdmin", ReplyAction="http://tempuri.org/IMultiplayerGame/IsAdminResponse")]
        bool IsAdmin(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/IsAdmin", ReplyAction="http://tempuri.org/IMultiplayerGame/IsAdminResponse")]
        System.Threading.Tasks.Task<bool> IsAdminAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/IsBanned", ReplyAction="http://tempuri.org/IMultiplayerGame/IsBannedResponse")]
        bool IsBanned(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/IsBanned", ReplyAction="http://tempuri.org/IMultiplayerGame/IsBannedResponse")]
        System.Threading.Tasks.Task<bool> IsBannedAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/SetThePlayersAreInGame", ReplyAction="http://tempuri.org/IMultiplayerGame/SetThePlayersAreInGameResponse")]
        void SetThePlayersAreInGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/SetThePlayersAreInGame", ReplyAction="http://tempuri.org/IMultiplayerGame/SetThePlayersAreInGameResponse")]
        System.Threading.Tasks.Task SetThePlayersAreInGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/SetThePlayersAreNotInGame", ReplyAction="http://tempuri.org/IMultiplayerGame/SetThePlayersAreNotInGameResponse")]
        void SetThePlayersAreNotInGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/SetThePlayersAreNotInGame", ReplyAction="http://tempuri.org/IMultiplayerGame/SetThePlayersAreNotInGameResponse")]
        System.Threading.Tasks.Task SetThePlayersAreNotInGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/ThePlayersAreInGame", ReplyAction="http://tempuri.org/IMultiplayerGame/ThePlayersAreInGameResponse")]
        bool ThePlayersAreInGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMultiplayerGame/ThePlayersAreInGame", ReplyAction="http://tempuri.org/IMultiplayerGame/ThePlayersAreInGameResponse")]
        System.Threading.Tasks.Task<bool> ThePlayersAreInGameAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMultiplayerGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/ExpelPlayerFromLobbyView")]
        void ExpelPlayerFromLobbyView();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/UpdateBannedProfilesLists")]
        void UpdateBannedProfilesLists();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/UpdateConnectedProfilesLists")]
        void UpdateConnectedProfilesLists();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMultiplayerGameChannel : Renovación_LIS_Client.ServiceMultiplayerGameReference.IMultiplayerGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MultiplayerGameClient : System.ServiceModel.DuplexClientBase<Renovación_LIS_Client.ServiceMultiplayerGameReference.IMultiplayerGame>, Renovación_LIS_Client.ServiceMultiplayerGameReference.IMultiplayerGame {
        
        public MultiplayerGameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MultiplayerGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MultiplayerGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MultiplayerGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MultiplayerGameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void BanPlayer(string username) {
            base.Channel.BanPlayer(username);
        }
        
        public System.Threading.Tasks.Task BanPlayerAsync(string username) {
            return base.Channel.BanPlayerAsync(username);
        }
        
        public void Connect(string username) {
            base.Channel.Connect(username);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string username) {
            return base.Channel.ConnectAsync(username);
        }
        
        public void Disconnect(string username) {
            base.Channel.Disconnect(username);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string username) {
            return base.Channel.DisconnectAsync(username);
        }
        
        public void SetAdmin(string username) {
            base.Channel.SetAdmin(username);
        }
        
        public System.Threading.Tasks.Task SetAdminAsync(string username) {
            return base.Channel.SetAdminAsync(username);
        }
        
        public void UnbanPlayer(string username) {
            base.Channel.UnbanPlayer(username);
        }
        
        public System.Threading.Tasks.Task UnbanPlayerAsync(string username) {
            return base.Channel.UnbanPlayerAsync(username);
        }
        
        public string[] GetBannedProfiles() {
            return base.Channel.GetBannedProfiles();
        }
        
        public System.Threading.Tasks.Task<string[]> GetBannedProfilesAsync() {
            return base.Channel.GetBannedProfilesAsync();
        }
        
        public string[] GetConnectedProfiles() {
            return base.Channel.GetConnectedProfiles();
        }
        
        public System.Threading.Tasks.Task<string[]> GetConnectedProfilesAsync() {
            return base.Channel.GetConnectedProfilesAsync();
        }
        
        public bool IsAdmin(string nickname) {
            return base.Channel.IsAdmin(nickname);
        }
        
        public System.Threading.Tasks.Task<bool> IsAdminAsync(string nickname) {
            return base.Channel.IsAdminAsync(nickname);
        }
        
        public bool IsBanned(string nickname) {
            return base.Channel.IsBanned(nickname);
        }
        
        public System.Threading.Tasks.Task<bool> IsBannedAsync(string nickname) {
            return base.Channel.IsBannedAsync(nickname);
        }
        
        public void SetThePlayersAreInGame() {
            base.Channel.SetThePlayersAreInGame();
        }
        
        public System.Threading.Tasks.Task SetThePlayersAreInGameAsync() {
            return base.Channel.SetThePlayersAreInGameAsync();
        }
        
        public void SetThePlayersAreNotInGame() {
            base.Channel.SetThePlayersAreNotInGame();
        }
        
        public System.Threading.Tasks.Task SetThePlayersAreNotInGameAsync() {
            return base.Channel.SetThePlayersAreNotInGameAsync();
        }
        
        public bool ThePlayersAreInGame() {
            return base.Channel.ThePlayersAreInGame();
        }
        
        public System.Threading.Tasks.Task<bool> ThePlayersAreInGameAsync() {
            return base.Channel.ThePlayersAreInGameAsync();
        }
    }
}
