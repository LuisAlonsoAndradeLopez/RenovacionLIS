//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Renovación_LIS_Client.ServiceMultiplayerGameReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMultiplayerGameReference.IMultiplayerGame", CallbackContract=typeof(Renovación_LIS_Client.ServiceMultiplayerGameReference.IMultiplayerGameCallback))]
    public interface IMultiplayerGame {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/BanPlayer")]
        void BanPlayer(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/BanPlayer")]
        System.Threading.Tasks.Task BanPlayerAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/Connect")]
        void Connect(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/Connect")]
        System.Threading.Tasks.Task ConnectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/Disconnect")]
        void Disconnect(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/SetAdmin")]
        void SetAdmin(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/SetAdmin")]
        System.Threading.Tasks.Task SetAdminAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/UnbanPlayer")]
        void UnbanPlayer(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/UnbanPlayer")]
        System.Threading.Tasks.Task UnbanPlayerAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/UpdateBannedProfilesListsToAllConnectedClient" +
            "s")]
        void UpdateBannedProfilesListsToAllConnectedClients();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/UpdateBannedProfilesListsToAllConnectedClient" +
            "s")]
        System.Threading.Tasks.Task UpdateBannedProfilesListsToAllConnectedClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/UpdateConnectedProfilesListsToAllConnectedCli" +
            "ents")]
        void UpdateConnectedProfilesListsToAllConnectedClients();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/UpdateConnectedProfilesListsToAllConnectedCli" +
            "ents")]
        System.Threading.Tasks.Task UpdateConnectedProfilesListsToAllConnectedClientsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMultiplayerGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/UpdateBannedProfilesLists")]
        void UpdateBannedProfilesLists();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerGame/UpdateConnectedProfilesLists")]
        void UpdateConnectedProfilesLists();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMultiplayerGameChannel : Renovación_LIS_Client.ServiceMultiplayerGameReference.IMultiplayerGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MultiplayerGameClient : System.ServiceModel.DuplexClientBase<Renovación_LIS_Client.ServiceMultiplayerGameReference.IMultiplayerGame>, Renovación_LIS_Client.ServiceMultiplayerGameReference.IMultiplayerGame {
        
        public MultiplayerGameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MultiplayerGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MultiplayerGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MultiplayerGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MultiplayerGameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void BanPlayer(string username) {
            base.Channel.BanPlayer(username);
        }
        
        public System.Threading.Tasks.Task BanPlayerAsync(string username) {
            return base.Channel.BanPlayerAsync(username);
        }
        
        public void Connect(string username) {
            base.Channel.Connect(username);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string username) {
            return base.Channel.ConnectAsync(username);
        }
        
        public void Disconnect(string username) {
            base.Channel.Disconnect(username);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string username) {
            return base.Channel.DisconnectAsync(username);
        }
        
        public void SetAdmin(string username) {
            base.Channel.SetAdmin(username);
        }
        
        public System.Threading.Tasks.Task SetAdminAsync(string username) {
            return base.Channel.SetAdminAsync(username);
        }
        
        public void UnbanPlayer(string username) {
            base.Channel.UnbanPlayer(username);
        }
        
        public System.Threading.Tasks.Task UnbanPlayerAsync(string username) {
            return base.Channel.UnbanPlayerAsync(username);
        }
        
        public void UpdateBannedProfilesListsToAllConnectedClients() {
            base.Channel.UpdateBannedProfilesListsToAllConnectedClients();
        }
        
        public System.Threading.Tasks.Task UpdateBannedProfilesListsToAllConnectedClientsAsync() {
            return base.Channel.UpdateBannedProfilesListsToAllConnectedClientsAsync();
        }
        
        public void UpdateConnectedProfilesListsToAllConnectedClients() {
            base.Channel.UpdateConnectedProfilesListsToAllConnectedClients();
        }
        
        public System.Threading.Tasks.Task UpdateConnectedProfilesListsToAllConnectedClientsAsync() {
            return base.Channel.UpdateConnectedProfilesListsToAllConnectedClientsAsync();
        }
    }
}
