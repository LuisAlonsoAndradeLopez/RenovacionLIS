//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Renovación_LIS_Client.ServiceChatReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChatReference.IChat", CallbackContract=typeof(Renovación_LIS_Client.ServiceChatReference.IChatCallback))]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/JoinChat")]
        void JoinChat(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/JoinChat")]
        System.Threading.Tasks.Task JoinChatAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/LeaveChat")]
        void LeaveChat(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/LeaveChat")]
        System.Threading.Tasks.Task LeaveChatAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/SendMessage")]
        void SendMessage(string senderNickname, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string senderNickname, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/UpdateChatToAllConnectedClients")]
        void UpdateChatToAllConnectedClients(string senderNickname, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/UpdateChatToAllConnectedClients")]
        System.Threading.Tasks.Task UpdateChatToAllConnectedClientsAsync(string senderNickname, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/UpdateChat")]
        void UpdateChat(string senderNickname, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : Renovación_LIS_Client.ServiceChatReference.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<Renovación_LIS_Client.ServiceChatReference.IChat>, Renovación_LIS_Client.ServiceChatReference.IChat {
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void JoinChat(string nickname) {
            base.Channel.JoinChat(nickname);
        }
        
        public System.Threading.Tasks.Task JoinChatAsync(string nickname) {
            return base.Channel.JoinChatAsync(nickname);
        }
        
        public void LeaveChat(string nickname) {
            base.Channel.LeaveChat(nickname);
        }
        
        public System.Threading.Tasks.Task LeaveChatAsync(string nickname) {
            return base.Channel.LeaveChatAsync(nickname);
        }
        
        public void SendMessage(string senderNickname, string message) {
            base.Channel.SendMessage(senderNickname, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string senderNickname, string message) {
            return base.Channel.SendMessageAsync(senderNickname, message);
        }
        
        public void UpdateChatToAllConnectedClients(string senderNickname, string message) {
            base.Channel.UpdateChatToAllConnectedClients(senderNickname, message);
        }
        
        public System.Threading.Tasks.Task UpdateChatToAllConnectedClientsAsync(string senderNickname, string message) {
            return base.Channel.UpdateChatToAllConnectedClientsAsync(senderNickname, message);
        }
    }
}
