//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Renovación_LIS_Client.ServiceMultiplayerCrosswordForCallbackMethodsReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMultiplayerCrosswordForCallbackMethodsReference.IMultiplayerCrosswordCallb" +
        "ackMethods", CallbackContract=typeof(Renovación_LIS_Client.ServiceMultiplayerCrosswordForCallbackMethodsReference.IMultiplayerCrosswordCallbackMethodsCallback))]
    public interface IMultiplayerCrosswordCallbackMethods {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/AddPointsToProfile")]
        void AddPointsToProfile(string userNickname, int points);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/AddPointsToProfile")]
        System.Threading.Tasks.Task AddPointsToProfileAsync(string userNickname, int points);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/Connect")]
        void Connect(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/Connect")]
        System.Threading.Tasks.Task ConnectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/Disconnect")]
        void Disconnect(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/OpenTheMultiplayerCrosswo" +
            "rdViewToConnectedClients")]
        void OpenTheMultiplayerCrosswordViewToConnectedClients();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/OpenTheMultiplayerCrosswo" +
            "rdViewToConnectedClients")]
        System.Threading.Tasks.Task OpenTheMultiplayerCrosswordViewToConnectedClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/OpenTheRandomMultiplayerC" +
            "rosswordGeneratorViewToConnectedClientsExceptTheAdmin")]
        void OpenTheRandomMultiplayerCrosswordGeneratorViewToConnectedClientsExceptTheAdmin(string adminNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/OpenTheRandomMultiplayerC" +
            "rosswordGeneratorViewToConnectedClientsExceptTheAdmin")]
        System.Threading.Tasks.Task OpenTheRandomMultiplayerCrosswordGeneratorViewToConnectedClientsExceptTheAdminAsync(string adminNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/ShowTheSelectedCrosswordB" +
            "orderToConnectedClients")]
        void ShowTheSelectedCrosswordBorderToConnectedClients();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/ShowTheSelectedCrosswordB" +
            "orderToConnectedClients")]
        System.Threading.Tasks.Task ShowTheSelectedCrosswordBorderToConnectedClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/StartCountdown")]
        void StartCountdown(int totalSeconds);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/StartCountdown")]
        System.Threading.Tasks.Task StartCountdownAsync(int totalSeconds);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/StartTheCrosswordSelectio" +
            "nAlgorythm")]
        void StartTheCrosswordSelectionAlgorythm();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/StartTheCrosswordSelectio" +
            "nAlgorythm")]
        System.Threading.Tasks.Task StartTheCrosswordSelectionAlgorythmAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/UpdateCrosswordsToProfile" +
            "sToAllConnectedProfiles")]
        void UpdateCrosswordsToProfilesToAllConnectedProfiles();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/UpdateCrosswordsToProfile" +
            "sToAllConnectedProfiles")]
        System.Threading.Tasks.Task UpdateCrosswordsToProfilesToAllConnectedProfilesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMultiplayerCrosswordCallbackMethodsCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/OpenMultiplayerCrosswordV" +
            "iew")]
        void OpenMultiplayerCrosswordView(int crosswordNumberSelected);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/OpenRandomMultiplayerCros" +
            "swordGeneratorViewInTheCurrentLobbyViewChildPage")]
        void OpenRandomMultiplayerCrosswordGeneratorViewInTheCurrentLobbyViewChildPage();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/ShowTheSelectedCrosswordB" +
            "order")]
        void ShowTheSelectedCrosswordBorder();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/UpdateCountdown")]
        void UpdateCountdown(int seconds);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/UpdateCrossword")]
        void UpdateCrossword();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMultiplayerCrosswordCallbackMethods/UpdateProfilesPoints")]
        void UpdateProfilesPoints();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMultiplayerCrosswordCallbackMethodsChannel : Renovación_LIS_Client.ServiceMultiplayerCrosswordForCallbackMethodsReference.IMultiplayerCrosswordCallbackMethods, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MultiplayerCrosswordCallbackMethodsClient : System.ServiceModel.DuplexClientBase<Renovación_LIS_Client.ServiceMultiplayerCrosswordForCallbackMethodsReference.IMultiplayerCrosswordCallbackMethods>, Renovación_LIS_Client.ServiceMultiplayerCrosswordForCallbackMethodsReference.IMultiplayerCrosswordCallbackMethods {
        
        public MultiplayerCrosswordCallbackMethodsClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MultiplayerCrosswordCallbackMethodsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MultiplayerCrosswordCallbackMethodsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MultiplayerCrosswordCallbackMethodsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MultiplayerCrosswordCallbackMethodsClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddPointsToProfile(string userNickname, int points) {
            base.Channel.AddPointsToProfile(userNickname, points);
        }
        
        public System.Threading.Tasks.Task AddPointsToProfileAsync(string userNickname, int points) {
            return base.Channel.AddPointsToProfileAsync(userNickname, points);
        }
        
        public void Connect(string username) {
            base.Channel.Connect(username);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string username) {
            return base.Channel.ConnectAsync(username);
        }
        
        public void Disconnect(string username) {
            base.Channel.Disconnect(username);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string username) {
            return base.Channel.DisconnectAsync(username);
        }
        
        public void OpenTheMultiplayerCrosswordViewToConnectedClients() {
            base.Channel.OpenTheMultiplayerCrosswordViewToConnectedClients();
        }
        
        public System.Threading.Tasks.Task OpenTheMultiplayerCrosswordViewToConnectedClientsAsync() {
            return base.Channel.OpenTheMultiplayerCrosswordViewToConnectedClientsAsync();
        }
        
        public void OpenTheRandomMultiplayerCrosswordGeneratorViewToConnectedClientsExceptTheAdmin(string adminNickname) {
            base.Channel.OpenTheRandomMultiplayerCrosswordGeneratorViewToConnectedClientsExceptTheAdmin(adminNickname);
        }
        
        public System.Threading.Tasks.Task OpenTheRandomMultiplayerCrosswordGeneratorViewToConnectedClientsExceptTheAdminAsync(string adminNickname) {
            return base.Channel.OpenTheRandomMultiplayerCrosswordGeneratorViewToConnectedClientsExceptTheAdminAsync(adminNickname);
        }
        
        public void ShowTheSelectedCrosswordBorderToConnectedClients() {
            base.Channel.ShowTheSelectedCrosswordBorderToConnectedClients();
        }
        
        public System.Threading.Tasks.Task ShowTheSelectedCrosswordBorderToConnectedClientsAsync() {
            return base.Channel.ShowTheSelectedCrosswordBorderToConnectedClientsAsync();
        }
        
        public void StartCountdown(int totalSeconds) {
            base.Channel.StartCountdown(totalSeconds);
        }
        
        public System.Threading.Tasks.Task StartCountdownAsync(int totalSeconds) {
            return base.Channel.StartCountdownAsync(totalSeconds);
        }
        
        public void StartTheCrosswordSelectionAlgorythm() {
            base.Channel.StartTheCrosswordSelectionAlgorythm();
        }
        
        public System.Threading.Tasks.Task StartTheCrosswordSelectionAlgorythmAsync() {
            return base.Channel.StartTheCrosswordSelectionAlgorythmAsync();
        }
        
        public void UpdateCrosswordsToProfilesToAllConnectedProfiles() {
            base.Channel.UpdateCrosswordsToProfilesToAllConnectedProfiles();
        }
        
        public System.Threading.Tasks.Task UpdateCrosswordsToProfilesToAllConnectedProfilesAsync() {
            return base.Channel.UpdateCrosswordsToProfilesToAllConnectedProfilesAsync();
        }
    }
}
