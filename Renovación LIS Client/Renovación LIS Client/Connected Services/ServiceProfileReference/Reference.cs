//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Renovación_LIS_Client.ServiceProfileReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceProfileReference.IProfile")]
    public interface IProfile {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfile/GetFriends", ReplyAction="http://tempuri.org/IProfile/GetFriendsResponse")]
        domain.Profile[] GetFriends(int profileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfile/GetFriends", ReplyAction="http://tempuri.org/IProfile/GetFriendsResponse")]
        System.Threading.Tasks.Task<domain.Profile[]> GetFriendsAsync(int profileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfile/GetImage", ReplyAction="http://tempuri.org/IProfile/GetImageResponse")]
        byte[] GetImage(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfile/GetImage", ReplyAction="http://tempuri.org/IProfile/GetImageResponse")]
        System.Threading.Tasks.Task<byte[]> GetImageAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfile/UploadImage", ReplyAction="http://tempuri.org/IProfile/UploadImageResponse")]
        bool UploadImage(string fileName, byte[] imageData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfile/UploadImage", ReplyAction="http://tempuri.org/IProfile/UploadImageResponse")]
        System.Threading.Tasks.Task<bool> UploadImageAsync(string fileName, byte[] imageData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProfileChannel : Renovación_LIS_Client.ServiceProfileReference.IProfile, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProfileClient : System.ServiceModel.ClientBase<Renovación_LIS_Client.ServiceProfileReference.IProfile>, Renovación_LIS_Client.ServiceProfileReference.IProfile {
        
        public ProfileClient() {
        }
        
        public ProfileClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProfileClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProfileClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProfileClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public domain.Profile[] GetFriends(int profileID) {
            return base.Channel.GetFriends(profileID);
        }
        
        public System.Threading.Tasks.Task<domain.Profile[]> GetFriendsAsync(int profileID) {
            return base.Channel.GetFriendsAsync(profileID);
        }
        
        public byte[] GetImage(string fileName) {
            return base.Channel.GetImage(fileName);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetImageAsync(string fileName) {
            return base.Channel.GetImageAsync(fileName);
        }
        
        public bool UploadImage(string fileName, byte[] imageData) {
            return base.Channel.UploadImage(fileName, imageData);
        }
        
        public System.Threading.Tasks.Task<bool> UploadImageAsync(string fileName, byte[] imageData) {
            return base.Channel.UploadImageAsync(fileName, imageData);
        }
    }
}
