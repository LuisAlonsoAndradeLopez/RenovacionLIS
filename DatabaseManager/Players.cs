//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager
{
    using System;
    using System.Runtime.Serialization;

    [DataContract]
    public partial class Players
    {
        [DataMember]
        public long IDPlayer { get; set; }
        [DataMember]
        public string Names { get; set; }
        [DataMember]
        public string Surnames { get; set; }
        [DataMember]
        public string NickName { get; set; }
        [DataMember]
        public System.DateTime BirthDate { get; set; }
        [DataMember]
        public string Email { get; set; }
        [DataMember]
        public string Password { get; set; }

        [DataMember]
        public virtual Profiles Profiles { get; set; }



        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            Players other = (Players)obj;
            return Names == other.Names &&
                   Surnames == other.Surnames &&
                   string.Equals(NickName, other.NickName, StringComparison.OrdinalIgnoreCase) &&
                   string.Equals(Email, other.Email, StringComparison.OrdinalIgnoreCase);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hash = 17;
                hash = hash * 23 + Names.GetHashCode();
                hash = hash * 23 + (Surnames?.GetHashCode() ?? 0);
                hash = hash * 23 + (NickName?.ToLowerInvariant().GetHashCode() ?? 0);
                hash = hash * 23 + (Email?.ToLowerInvariant().GetHashCode() ?? 0);
                return hash;
            }
        }
    }
}
